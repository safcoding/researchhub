import { useState, useEffect } from 'react';
import { supabase } from '@/lib/db-connect';
import type { Grant } from '@/hooks/grant-logic';
import { Pie } from 'react-chartjs-2';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  ArcElement,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js';

// Register Chart.js components
ChartJS.register(
  ArcElement,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler
);

interface ChartModalProps {
  onClose: () => void;
}

export function ChartModal({ onClose }: ChartModalProps) {
  const [grants, setGrants] = useState<Grant[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [chartType, setChartType] = useState<'pie' | 'line'>('pie');
  
  useEffect(() => {
    async function fetchGrants() {
      try {
        setLoading(true);
        setError(null);
        
        // Fetch the list of grants from the database
        const { data, error } = await supabase.from('grant').select('*');
        
        if (error) {
          throw error;
        }
        
        if (!data) {
          setGrants([]);
          return;
        }
        
        setGrants(data);
      } catch (err) {
        console.error('Error fetching grants:', err);
        setError(err instanceof Error ? err.message : 'Failed to load grants');
      } finally {
        setLoading(false);
      }
    }
    
    void fetchGrants();
  }, []);

  // Function to generate pie chart data by grant type  const generatePieChartData = () => {
    // Count grants by grant type
    const grantTypeCount: Record<string, number> = {};
    let totalAmount = 0;
    
    grants.forEach(grant => {
      const grantType = grant.GRANT_TYPE ?? 'Unknown';
      if (grantTypeCount[grantType] === undefined) {
        grantTypeCount[grantType] = 0;
      }
      grantTypeCount[grantType] += (grant.PRO_APPROVED ?? 0);
      totalAmount += (grant.PRO_APPROVED ?? 0);
    });
    
    // Convert to percentages
    const grantTypes = Object.keys(grantTypeCount);
    const data = grantTypes.map(type => ({
      type,
      percentage: Math.round((grantTypeCount[type] / totalAmount) * 100),
      amount: grantTypeCount[type]
    }));
    
    return {
      labels: data.map(item => item.type),
      datasets: [
        {
          data: data.map(item => item.percentage),
          backgroundColor: [
            '#1E40AF', '#1C64F2', '#3F83F8', '#76A9FA', 
            '#3B82F6', '#60A5FA', '#93C5FD', '#BFDBFE',
            '#22C55E', '#10B981', '#34D399', '#6EE7B7'
          ],
          borderWidth: 0,
        },
      ],
      // Store the original amounts for the tooltip
      amounts: data.map(item => item.amount),
    };
  };

  // Function to generate line chart data by date
  const generateLineChartData = () => {
    // Group by month and year
    const monthlyData: Record<string, number> = {};
    
    grants.forEach(grant => {
      if (grant.PRO_DATESTART) {
        const date = new Date(grant.PRO_DATESTART);
        const monthYear = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
        
        monthlyData[monthYear] = (monthlyData[monthYear] ?? 0) + (grant.PRO_APPROVED ?? 0);
      }
    });
    
    // Sort by date
    const sortedMonths = Object.keys(monthlyData).sort();
    
    // Format for display
    const formattedLabels = sortedMonths.map(monthYear => {
      const [year, month] = monthYear.split('-');
      if (!year || !month) return 'Unknown';
      const date = new Date(parseInt(year), parseInt(month) - 1);
      return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
    });
    
    return {
      labels: formattedLabels,
      datasets: [
        {
          label: 'Grant Amount (RM)',
          data: sortedMonths.map(month => monthlyData[month]),
          borderColor: '#1E40AF',
          backgroundColor: 'rgba(30, 64, 175, 0.2)',
          borderWidth: 2,
          tension: 0.4,
          fill: true,
          pointBackgroundColor: '#1E40AF',
          pointRadius: 4,
          pointHoverRadius: 6
        }
      ]
    };
  };

  const pieChartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'right' as const,
        align: 'center' as const,
        labels: {
          boxWidth: 12,
          padding: 15,
          font: {
            size: 12
          }
        }
      },      tooltip: {
        callbacks: {
          label: (context: any) => {
            const label = context.label ?? '';
            const value = Number(context.raw) ?? 0;
            const totalAmount = pieData.amounts?.[context.dataIndex] ?? 0;
            return `${label}: ${value}% (RM${totalAmount.toLocaleString()})`;
          }
        }
      }
    }
  };

  const lineChartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false
      },      tooltip: {
        callbacks: {
          label: (context: any) => {
            return `RM${Number(context.raw).toLocaleString()}`;
          }
        }
      }
    },
    scales: {
      x: {
        grid: {
          display: false
        },
        ticks: {
          color: '#6B7280'
        }
      },
      y: {
        grid: {
          color: '#E5E7EB'
        },
        ticks: {
          color: '#6B7280',
          callback: (tickValue: string | number) => {
            // Format currency
            return `RM${Number(tickValue).toLocaleString()}`;
          }
        }
      }
    }
  };

  const pieData = generatePieChartData();
  const lineData = generateLineChartData();
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-3/4 max-w-4xl max-h-[90vh] overflow-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Grant Charts</h2>
          <button 
            onClick={onClose}
            className="text-gray-600 hover:text-gray-800"
            aria-label="Close"
            title="Close"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        {loading ? (
          <div className="text-center py-8">
            <svg className="animate-spin h-8 w-8 text-blue-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p className="mt-2">Loading grant data...</p>
          </div>
        ) : (
          <>
            {grants.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <p>No grant data available for charts</p>
              </div>
            ) : (
              <>
                {/* Chart type dropdown */}
                <div className="mb-6 flex justify-end">
                  <div className="relative inline-block w-64">                    <select 
                      value={chartType}
                      onChange={(e) => setChartType(e.target.value as 'pie' | 'line')}
                      className="block appearance-none w-full bg-white border border-gray-300 text-gray-700 py-2 px-4 pr-8 rounded leading-tight focus:outline-none focus:border-blue-500"
                      aria-label="Select chart type"
                    >
                      <option value="pie">Grant Type Distribution (Pie Chart)</option>
                      <option value="line">Grant Timeline by Date (Line Chart)</option>
                    </select>
                    <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                      <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                        <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                      </svg>
                    </div>
                  </div>
                </div>

                {/* Chart container - fixed height to prevent layout issues */}
                <div className="h-[500px] flex items-center justify-center">
                  {chartType === 'pie' ? (
                    <div className="w-full h-full flex flex-col">
                      <h3 className="text-lg font-medium text-gray-900 mb-4 text-center">
                        Grant Amount Distribution by Type
                      </h3>
                      <div className="flex-1">
                        <Pie data={pieData} options={pieChartOptions} />
                      </div>
                      <p className="mt-4 text-sm text-gray-500 text-center">
                        Distribution of grant funding by grant type (percentage of total amount)
                      </p>
                    </div>
                  ) : (
                    <div className="w-full h-full flex flex-col">
                      <h3 className="text-lg font-medium text-gray-900 mb-4 text-center">
                        Grant Amount by Start Date
                      </h3>
                      <div className="flex-1">
                        <Line data={lineData} options={lineChartOptions} />
                      </div>
                      <p className="mt-4 text-sm text-gray-500 text-center">
                        Total grant amount by month of start date
                      </p>
                    </div>
                  )}
                </div>
              </>
            )}
          </>
        )}
        
        <div className="flex justify-end mt-6">
          <button
            onClick={onClose}
            className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}
